{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = void 0;\n\nconst utils_1 = require(\"./utils\"); // **`parse()` - Parse a UUID into it's component bytes**\n\n\nconst parse = (s, buf, offset) => {\n  let i = buf && offset || 0;\n  let ii = 0;\n  buf = buf || [];\n  s.toLowerCase().replace(/[0-9a-f]{2}/g, oct => {\n    // Don't overflow!\n    if (ii < 16 && buf) {\n      buf[i + ii++] = utils_1.hexToByte[oct];\n    }\n\n    return '';\n  }); // Zero out remaining bytes if string was short\n\n  while (ii < 16) {\n    buf[i + ii++] = 0;\n  }\n\n  return buf;\n};\n\nexports.parse = parse;","map":{"version":3,"sources":["/Users/parthipanchandrasekaran/brain-flix-app/client/node_modules/react-native-uuid/src/parse.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA,C,CAEA;;;AACO,MAAM,KAAK,GAAG,CAAC,CAAD,EAAY,GAAZ,EAAiC,MAAjC,KAAoD;AACvE,MAAI,CAAC,GAAI,GAAG,IAAI,MAAR,IAAmB,CAA3B;AACA,MAAI,EAAE,GAAG,CAAT;AAEA,EAAA,GAAG,GAAG,GAAG,IAAI,EAAb;AACA,EAAA,CAAC,CAAC,WAAF,GAAgB,OAAhB,CAAwB,cAAxB,EAAyC,GAAD,IAAgB;AACtD;AACA,QAAI,EAAE,GAAG,EAAL,IAAW,GAAf,EAAoB;AAClB,MAAA,GAAG,CAAC,CAAC,GAAG,EAAE,EAAP,CAAH,GAAgB,OAAA,CAAA,SAAA,CAAU,GAAV,CAAhB;AACD;;AAED,WAAO,EAAP;AACD,GAPD,EALuE,CAcvE;;AACA,SAAO,EAAE,GAAG,EAAZ,EAAgB;AACd,IAAA,GAAG,CAAC,CAAC,GAAG,EAAE,EAAP,CAAH,GAAgB,CAAhB;AACD;;AAED,SAAO,GAAP;AACD,CApBM;;AAAM,OAAA,CAAA,KAAA,GAAK,KAAL","sourcesContent":["import {hexToByte} from './utils';\n\n// **`parse()` - Parse a UUID into it's component bytes**\nexport const parse = (s: string, buf?: Array<number>, offset?: number) => {\n  let i = (buf && offset) || 0;\n  let ii = 0;\n\n  buf = buf || [];\n  s.toLowerCase().replace(/[0-9a-f]{2}/g, (oct: string) => {\n    // Don't overflow!\n    if (ii < 16 && buf) {\n      buf[i + ii++] = hexToByte[oct];\n    }\n\n    return '';\n  });\n\n  // Zero out remaining bytes if string was short\n  while (ii < 16) {\n    buf[i + ii++] = 0;\n  }\n\n  return buf;\n};\n"]},"metadata":{},"sourceType":"script"}