{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.v35 = void 0;\n/* eslint-disable no-bitwise */\n\nconst stringify_1 = require(\"./stringify\");\n\nconst parse_1 = require(\"./parse\");\n\nconst utils_1 = require(\"./utils\");\n\nconst v35 = (name, version, hashfunc) => {\n  const generateUUID = function (value, namespace, buf) {\n    let offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    if (typeof value === 'string') {\n      value = utils_1.stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse_1.parse(namespace);\n    }\n\n    if (namespace && namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g.\n    // `bytes = hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = utils_1.stringToBytes(hashfunc(utils_1.bytesToString(bytes)));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n    }\n\n    return buf ? buf : stringify_1.stringify(bytes);\n  };\n\n  return generateUUID;\n};\n\nexports.v35 = v35;","map":{"version":3,"sources":["/Users/parthipanchandrasekaran/brain-flix-app/client/node_modules/react-native-uuid/src/v35.ts"],"names":[],"mappings":";;;;;;AAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AASO,MAAM,GAAG,GAAG,CACjB,IADiB,EAEjB,OAFiB,EAGjB,QAHiB,KAID;AAChB,QAAM,YAAY,GAAG,UACnB,KADmB,EAEnB,SAFmB,EAGnB,GAHmB,EAKE;AAAA,QADrB,MACqB,uEADJ,CACI;;AACrB,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,MAAA,KAAK,GAAG,OAAA,CAAA,aAAA,CAAc,KAAd,CAAR;AACD;;AAED,QAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACjC,MAAA,SAAS,GAAG,OAAA,CAAA,KAAA,CAAM,SAAN,CAAZ;AACD;;AAED,QAAI,SAAS,IAAI,SAAS,CAAC,MAAV,KAAqB,EAAtC,EAA0C;AACxC,YAAM,SAAS,CACb,kEADa,CAAf;AAGD,KAboB,CAerB;AACA;AACA;;;AACA,QAAI,KAAK,GAAG,IAAI,UAAJ,CAAe,KAAK,KAAK,CAAC,MAA1B,CAAZ;AACA,IAAA,KAAK,CAAC,GAAN,CAAU,SAAV;AACA,IAAA,KAAK,CAAC,GAAN,CAAU,KAAV,EAAiB,SAAS,CAAC,MAA3B;AACA,IAAA,KAAK,GAAG,OAAA,CAAA,aAAA,CAAc,QAAQ,CAAC,OAAA,CAAA,aAAA,CAAc,KAAd,CAAD,CAAtB,CAAR;AAEA,IAAA,KAAK,CAAC,CAAD,CAAL,GAAY,KAAK,CAAC,CAAD,CAAL,GAAW,IAAZ,GAAoB,OAA/B;AACA,IAAA,KAAK,CAAC,CAAD,CAAL,GAAY,KAAK,CAAC,CAAD,CAAL,GAAW,IAAZ,GAAoB,IAA/B;;AAEA,QAAI,GAAJ,EAAS;AACP,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,EAAE,CAA1B,EAA6B;AAC3B,QAAA,GAAG,CAAC,MAAM,GAAG,CAAV,CAAH,GAAkB,KAAK,CAAC,CAAD,CAAvB;AACD;AACF;;AAED,WAAO,GAAG,GAAG,GAAH,GAAS,WAAA,CAAA,SAAA,CAAU,KAAV,CAAnB;AACD,GAtCD;;AAwCA,SAAO,YAAP;AACD,CA9CM;;AAAM,OAAA,CAAA,GAAA,GAAG,GAAH","sourcesContent":["/* eslint-disable no-bitwise */\nimport {stringify} from './stringify';\nimport {parse} from './parse';\nimport {stringToBytes, bytesToString} from './utils';\n\nexport type GenerateUUID = (\n  value: string | Uint8Array,\n  namespace: string | number[],\n  buf?: number[],\n  offset?: number,\n) => string | number[];\n\nexport const v35 = (\n  name: string,\n  version: number,\n  hashfunc: (s: string) => string,\n): GenerateUUID => {\n  const generateUUID = (\n    value: string | Uint8Array,\n    namespace: string | number[],\n    buf?: number[],\n    offset: number = 0,\n  ): string | number[] => {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace && namespace.length !== 16) {\n      throw TypeError(\n        'Namespace must be array-like (16 iterable integer values, 0-255)',\n      );\n    }\n\n    // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g.\n    // `bytes = hashfunc([...namespace, ... value])`\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = stringToBytes(hashfunc(bytesToString(bytes)));\n\n    bytes[6] = (bytes[6] & 0x0f) | version;\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    if (buf) {\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n    }\n\n    return buf ? buf : stringify(bytes);\n  };\n\n  return generateUUID;\n};\n"]},"metadata":{},"sourceType":"script"}