{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringify = void 0;\n\nconst validate_1 = require(\"./validate\");\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nconst stringify = function (arr) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate_1.validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n};\n\nexports.stringify = stringify;","map":{"version":3,"sources":["/Users/parthipanchandrasekaran/brain-flix-app/client/node_modules/react-native-uuid/src/stringify.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;;AAGG;;;AACH,MAAM,SAAS,GAAa,EAA5B;;AAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,EAAE,CAA3B,EAA8B;AAC5B,EAAA,SAAS,CAAC,IAAV,CAAe,CAAC,CAAC,GAAG,KAAL,EAAY,QAAZ,CAAqB,EAArB,EAAyB,MAAzB,CAAgC,CAAhC,CAAf;AACD;;AAEM,MAAM,SAAS,GAAG,UAAC,GAAD,EAAwC;AAAA,MAAtB,MAAsB,uEAAb,CAAa;AAC/D;AACA;AACA,QAAM,IAAI,GAAG,CACX,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,CAAV,CAAJ,CAAT,GACA,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,CAAV,CAAJ,CADT,GAEA,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,CAAV,CAAJ,CAFT,GAGA,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,CAAV,CAAJ,CAHT,GAIA,GAJA,GAKA,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,CAAV,CAAJ,CALT,GAMA,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,CAAV,CAAJ,CANT,GAOA,GAPA,GAQA,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,CAAV,CAAJ,CART,GASA,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,CAAV,CAAJ,CATT,GAUA,GAVA,GAWA,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,CAAV,CAAJ,CAXT,GAYA,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,CAAV,CAAJ,CAZT,GAaA,GAbA,GAcA,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,EAAV,CAAJ,CAdT,GAeA,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,EAAV,CAAJ,CAfT,GAgBA,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,EAAV,CAAJ,CAhBT,GAiBA,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,EAAV,CAAJ,CAjBT,GAkBA,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,EAAV,CAAJ,CAlBT,GAmBA,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,EAAV,CAAJ,CApBE,EAqBX,WArBW,EAAb,CAH+D,CA0B/D;AACA;AACA;AACA;AACA;;AACA,MAAI,CAAC,UAAA,CAAA,QAAA,CAAS,IAAT,CAAL,EAAqB;AACnB,UAAM,SAAS,CAAC,6BAAD,CAAf;AACD;;AAED,SAAO,IAAP;AACD,CApCM;;AAAM,OAAA,CAAA,SAAA,GAAS,SAAT","sourcesContent":["import {validate} from './validate';\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex: string[] = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nexport const stringify = (arr: Uint8Array, offset = 0): string => {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (\n    byteToHex[arr[offset + 0]] +\n    byteToHex[arr[offset + 1]] +\n    byteToHex[arr[offset + 2]] +\n    byteToHex[arr[offset + 3]] +\n    '-' +\n    byteToHex[arr[offset + 4]] +\n    byteToHex[arr[offset + 5]] +\n    '-' +\n    byteToHex[arr[offset + 6]] +\n    byteToHex[arr[offset + 7]] +\n    '-' +\n    byteToHex[arr[offset + 8]] +\n    byteToHex[arr[offset + 9]] +\n    '-' +\n    byteToHex[arr[offset + 10]] +\n    byteToHex[arr[offset + 11]] +\n    byteToHex[arr[offset + 12]] +\n    byteToHex[arr[offset + 13]] +\n    byteToHex[arr[offset + 14]] +\n    byteToHex[arr[offset + 15]]\n  ).toLowerCase();\n\n  // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n};\n"]},"metadata":{},"sourceType":"script"}