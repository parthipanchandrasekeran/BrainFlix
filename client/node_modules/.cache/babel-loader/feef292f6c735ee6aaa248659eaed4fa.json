{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.v4 = void 0;\n/* eslint-disable no-bitwise */\n\nconst unparse_1 = require(\"./unparse\");\n\nconst rng_1 = require(\"./rng\"); // **`v4()` - Generate random UUID**\n// See https://github.com/broofa/node-uuid for API details\n\n\nconst v4 = (options, buf, offset) => {\n  // Deprecated - 'format' argument, as supported in v1.2\n  let i = buf && offset || 0; // buf = new Array<number>(16);\n\n  let rnds = rng_1.rng();\n\n  if (options && !(options instanceof String)) {\n    if (options.random) {\n      rnds = options.random;\n    }\n\n    if (options.rng) {\n      rnds = options.rng();\n    }\n  } // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    for (var ii = 0; ii < 16; ii++) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || unparse_1.unparse(rnds);\n};\n\nexports.v4 = v4;","map":{"version":3,"sources":["/Users/parthipanchandrasekaran/brain-flix-app/client/node_modules/react-native-uuid/src/v4.ts"],"names":[],"mappings":";;;;;;AAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA,C,CASA;AACA;;;AACO,MAAM,EAAE,GAAG,CAChB,OADgB,EAEhB,GAFgB,EAGhB,MAHgB,KAId;AACF;AACA,MAAI,CAAC,GAAI,GAAG,IAAI,MAAR,IAAmB,CAA3B,CAFE,CAIF;;AAEA,MAAI,IAAI,GAAa,KAAA,CAAA,GAAA,EAArB;;AAEA,MAAI,OAAO,IAAI,EAAE,OAAO,YAAY,MAArB,CAAf,EAA6C;AAC3C,QAAK,OAAqB,CAAC,MAA3B,EAAmC;AACjC,MAAA,IAAI,GAAI,OAAqB,CAAC,MAA9B;AACD;;AACD,QAAK,OAAqB,CAAC,GAA3B,EAAgC;AAC9B,MAAA,IAAI,GAAI,OAAqB,CAAC,GAAtB,EAAR;AACD;AACF,GAfC,CAiBF;;;AACA,EAAA,IAAI,CAAC,CAAD,CAAJ,GAAW,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAX,GAAmB,IAA7B;AACA,EAAA,IAAI,CAAC,CAAD,CAAJ,GAAW,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAX,GAAmB,IAA7B,CAnBE,CAqBF;;AACA,MAAI,GAAJ,EAAS;AACP,SAAK,IAAI,EAAE,GAAG,CAAd,EAAiB,EAAE,GAAG,EAAtB,EAA0B,EAAE,EAA5B,EAAgC;AAC9B,MAAA,GAAG,CAAC,CAAC,GAAG,EAAL,CAAH,GAAc,IAAI,CAAC,EAAD,CAAlB;AACD;AACF;;AAED,SAAO,GAAG,IAAI,SAAA,CAAA,OAAA,CAAQ,IAAR,CAAd;AACD,CAjCM;;AAAM,OAAA,CAAA,EAAA,GAAE,EAAF","sourcesContent":["/* eslint-disable no-bitwise */\nimport {unparse} from './unparse';\nimport {rng} from './rng';\n\n// https://github.com/DavidAnson/generateRandomUUID/blob/master/generateRandomUUID.js\n\ntype V4Options = {\n  random: number[];\n  rng?: () => number[];\n};\n\n// **`v4()` - Generate random UUID**\n// See https://github.com/broofa/node-uuid for API details\nexport const v4 = (\n  options?: V4Options | string,\n  buf?: Array<number>,\n  offset?: number,\n) => {\n  // Deprecated - 'format' argument, as supported in v1.2\n  let i = (buf && offset) || 0;\n\n  // buf = new Array<number>(16);\n\n  let rnds: number[] = rng();\n\n  if (options && !(options instanceof String)) {\n    if ((options as V4Options).random) {\n      rnds = (options as V4Options).random;\n    }\n    if ((options as V4Options).rng) {\n      rnds = (options as V4Options).rng!();\n    }\n  }\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ii++) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || unparse(rnds);\n};\n"]},"metadata":{},"sourceType":"script"}