{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bytesToString = exports.stringToBytes = exports.NIL = exports.X500 = exports.OID = exports.URL = exports.DNS = exports.hexToByte = exports.byteToHex = void 0;\nlet _byteToHex = [];\nlet _hexToByte = {};\n\nfor (var i = 0; i < 256; i++) {\n  _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n  _hexToByte[_byteToHex[i]] = i;\n}\n\nexports.byteToHex = _byteToHex;\nexports.hexToByte = _hexToByte;\nexports.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.OID = '6ba7b812-9dad-11d1-80b4-00c04fd430c8';\nexports.X500 = '6ba7b814-9dad-11d1-80b4-00c04fd430c8';\nexports.NIL = '00000000-0000-0000-0000-000000000000';\n\nconst stringToBytes = str => {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = new Uint8Array(str.length);\n\n  for (let j = 0; j < str.length; ++j) {\n    bytes[j] = str.charCodeAt(j);\n  }\n\n  return bytes;\n};\n\nexports.stringToBytes = stringToBytes;\n\nconst bytesToString = buf => {\n  const bufferView = new Uint8Array(buf, 0, buf.byteLength);\n  return String.fromCharCode.apply(null, Array.from(bufferView));\n};\n\nexports.bytesToString = bytesToString;","map":{"version":3,"sources":["/Users/parthipanchandrasekaran/brain-flix-app/client/node_modules/react-native-uuid/src/utils.ts"],"names":[],"mappings":";;;;;;AAAA,IAAI,UAAU,GAAa,EAA3B;AACA,IAAI,UAAU,GAA4B,EAA1C;;AAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,EAA1B,EAA8B;AAC5B,EAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,CAAC,CAAC,GAAG,KAAL,EAAY,QAAZ,CAAqB,EAArB,EAAyB,MAAzB,CAAgC,CAAhC,CAAhB;AACA,EAAA,UAAU,CAAC,UAAU,CAAC,CAAD,CAAX,CAAV,GAA4B,CAA5B;AACD;;AAEY,OAAA,CAAA,SAAA,GAAY,UAAZ;AACA,OAAA,CAAA,SAAA,GAAY,UAAZ;AAEA,OAAA,CAAA,GAAA,GAAM,sCAAN;AACA,OAAA,CAAA,GAAA,GAAM,sCAAN;AACA,OAAA,CAAA,GAAA,GAAM,sCAAN;AACA,OAAA,CAAA,IAAA,GAAO,sCAAP;AACA,OAAA,CAAA,GAAA,GAAM,sCAAN;;AAEN,MAAM,aAAa,GAAI,GAAD,IAAgB;AAC3C,EAAA,GAAG,GAAG,QAAQ,CAAC,kBAAkB,CAAC,GAAD,CAAnB,CAAd,CAD2C,CACF;;AAEzC,QAAM,KAAK,GAAe,IAAI,UAAJ,CAAe,GAAG,CAAC,MAAnB,CAA1B;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,EAAE,CAAlC,EAAqC;AACnC,IAAA,KAAK,CAAC,CAAD,CAAL,GAAW,GAAG,CAAC,UAAJ,CAAe,CAAf,CAAX;AACD;;AAED,SAAO,KAAP;AACD,CAVM;;AAAM,OAAA,CAAA,aAAA,GAAa,aAAb;;AAYN,MAAM,aAAa,GAAI,GAAD,IAAqB;AAChD,QAAM,UAAU,GAAG,IAAI,UAAJ,CAAe,GAAf,EAAoB,CAApB,EAAuB,GAAG,CAAC,UAA3B,CAAnB;AACA,SAAO,MAAM,CAAC,YAAP,CAAoB,KAApB,CAA0B,IAA1B,EAAgC,KAAK,CAAC,IAAN,CAAW,UAAX,CAAhC,CAAP;AACD,CAHM;;AAAM,OAAA,CAAA,aAAA,GAAa,aAAb","sourcesContent":["let _byteToHex: string[] = [];\nlet _hexToByte: {[key: string]: number} = {};\n\nfor (var i = 0; i < 256; i++) {\n  _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n  _hexToByte[_byteToHex[i]] = i;\n}\n\nexport const byteToHex = _byteToHex;\nexport const hexToByte = _hexToByte;\n\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport const OID = '6ba7b812-9dad-11d1-80b4-00c04fd430c8';\nexport const X500 = '6ba7b814-9dad-11d1-80b4-00c04fd430c8';\nexport const NIL = '00000000-0000-0000-0000-000000000000';\n\nexport const stringToBytes = (str: string) => {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes: Uint8Array = new Uint8Array(str.length);\n\n  for (let j = 0; j < str.length; ++j) {\n    bytes[j] = str.charCodeAt(j);\n  }\n\n  return bytes;\n};\n\nexport const bytesToString = (buf: ArrayBuffer) => {\n  const bufferView = new Uint8Array(buf, 0, buf.byteLength);\n  return String.fromCharCode.apply(null, Array.from(bufferView));\n};\n"]},"metadata":{},"sourceType":"script"}